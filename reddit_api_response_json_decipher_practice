[
{'data':
        {'before': None,
        'children': [
                    {'data':
                            {'secure_media_embed': {},
                            'created_utc': 1458486941.0,
                            'from_id': None,
                            'link_flair_css_class': None,
                            'num_reports': None,
                            'approved_by': None,
                            'media': None,
                            'banned_by': None,
                            'domain': 'hkupty.github.io',
                            'author_flair_css_class': None,
                            'author': 'ingvij',
                            'likes': None,
                            'secure_media': None,
                            'mod_reports': [],
                            'upvote_ratio': 0.87,
                            'saved': False,
                            'removal_reason': None,
                            'quarantine': False,
                            'distinguished': None,
                            'id': '4b7w9u',
                            'report_reasons': None,
                            'subreddit': 'Python',
                            'author_flair_text': None,
                            'media_embed': {},
                            'hidden': False,
                            'edited': False,
                            'visited': False,
                            'link_flair_text': None,
                            'ups': 55,
                            'num_comments': 13,
                            'user_reports': [],
                            'stickied': False,
                            'suggested_sort': None,
                            'name': 't3_4b7w9u',
                            'selftext_html': None,
                            'clicked': False,
                            'downs': 0,
                            'selftext': '',
                            'permalink': '/r/Python/comments/4b7w9u/functional_philosophy_and_applying_it_to_python/',
                            'from_kind': None,
                            'created': 1458515741.0,
                            'subreddit_id': 't5_2qh0y',
                            'url': 'http://hkupty.github.io/2016/Functional-Programming-Concepts-Idioms-and-Philosophy/',
                            'over_18': False,
                            'locked': False,
                            'thumbnail': '',
                            'gilded': 0,
                            'is_self': False,
                            'from': None,
                            'archived': False,
                            'hide_score': False,
                            'score': 55,
                            'title': 'Functional Philosophy and applying it to Python'
                            },
                    'kind': 't3'
                    }
                    ],
            'modhash': None,
            'after': None
        },
    'kind': 'Listing'
},
{'data':
        {'before': None,
        'children': [
                    {'data':
                            {'edited': False,
                            'stickied': False,
                            'created': 1458525326.0,
                            'distinguished': None,
                            'ups': 8,
                            'link_id': 't3_4b7w9u',
                            'user_reports': [],
                            'approved_by': None,
                            'likes': None,
                            'name': 't1_d16wtxk',
                            'created_utc': 1458496526.0,
                            'score_hidden': False,
                            'parent_id': 't3_4b7w9u',
                            'banned_by': None,
                            'author': 'mcilrain',
                            'body_html': '&lt;div class="md"&gt;&lt;p&gt;Increasingly I&amp;#39;ve been writing my Python libraries in a functional way but with an object-oriented API where methods just call the appropriate function.&lt;/p&gt;\n\n&lt;p&gt;I was motivated to do this because I found classes with lots of lines of code difficult to work with.&lt;/p&gt;\n\n&lt;p&gt;Also it made tests easier to write.&lt;/p&gt;\n\n&lt;p&gt;Named tuples are also very useful (they&amp;#39;re like immutable dicts/objects).&lt;/p&gt;\n&lt;/div&gt;',
                            'subreddit_id': 't5_2qh0y',
                            'controversiality': 0,
                            'replies': '',
                            'mod_reports': [],
                            'removal_reason': None,
                            'saved': False,
                            'author_flair_css_class': None,
                            'gilded': 0,
                            'archived': False,
                            'id': 'd16wtxk',
                            'report_reasons': None,
                            'subreddit': 'Python',
                            'author_flair_text': None,
                            'score': 8,
                            'num_reports': None,
                            'body': "Increasingly I've been writing my Python libraries in a functional way but with an object-oriented API where methods just call the appropriate function.\n\nI was motivated to do this because I found classes with lots of lines of code difficult to work with.\n\nAlso it made tests easier to write.\n\nNamed tuples are also very useful (they're like immutable dicts/objects).",
                            'downs': 0
                            },
                    'kind': 't1'
                    },
                    {'data':
                            {'edited': False,
                            'stickied': False,
                            'created': 1458524890.0,
                            'distinguished': None,
                            'ups': 6,
                            'link_id': 't3_4b7w9u',
                            'user_reports': [],
                            'approved_by': None,
                            'likes': None,
                            'name': 't1_d16wkim',
                            'created_utc': 1458496090.0,
                            'score_hidden': False,
                            'parent_id': 't3_4b7w9u',
                            'banned_by': None,
                            'author': 'kurashu89',
                            'body_html': '&lt;div class="md"&gt;&lt;p&gt;To add to this, functional programming doesn&amp;#39;t mean &lt;em&gt;completely forbidding&lt;/em&gt; objects. It&amp;#39;s entirely acceptable to have classes and objects, you&amp;#39;re just not allowed to mutate their state once they&amp;#39;ve been created. &lt;/p&gt;\n\n&lt;p&gt;Think datetime, it has state but aside from some C juju (in CPython at least), you can&amp;#39;t change that state. Instead, when you do &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;astimezone&lt;/code&gt;, you get a brand new datetime object.&lt;/p&gt;\n\n&lt;p&gt;Using immutable objects is very similar to how Haskell uses closures and even some monads. Option in Scala is implemented as an interface while Some and None are classes that implement it.&lt;/p&gt;\n&lt;/div&gt;',
                            'subreddit_id':
                            't5_2qh0y',
                            'controversiality': 0,
                            'replies': '',
                            'mod_reports': [],
                            'removal_reason': None,
                            'saved': False,
                            'author_flair_css_class': '',
                            'gilded': 0,
                            'archived': False,
                            'id': 'd16wkim',
                            'report_reasons': None,
                            'subreddit': 'Python',
                            'author_flair_text': 'Guise I got a job, thanks! | github.com/justanr',
                            'score': 6,
                            'num_reports': None,
                            'body': "To add to this, functional programming doesn't mean *completely forbidding* objects. It's entirely acceptable to have classes and objects, you're just not allowed to mutate their state once they've been created. \n\nThink datetime, it has state but aside from some C juju (in CPython at least), you can't change that state. Instead, when you do `replace` or `astimezone`, you get a brand new datetime object.\n\nUsing immutable objects is very similar to how Haskell uses closures and even some monads. Option in Scala is implemented as an interface while Some and None are classes that implement it.",
                            'downs': 0
                            },
                    'kind': 't1'
                    },
                    {'data':
                            {'edited': False,
                            'stickied': False,
                            'created': 1458527532.0,
                            'distinguished': None,
                            'ups': 9,
                            'link_id': 't3_4b7w9u',
                            'user_reports': [],
                            'approved_by': None,
                            'likes': None,
                            'name': 't1_d16y4ry',
                            'created_utc': 1458498732.0,
                            'score_hidden': False,
                            'parent_id': 't3_4b7w9u',
                            'banned_by': None,
                            'author': 'justanotherbody',
                            'body_html': '&lt;div class="md"&gt;&lt;p&gt;I really wish the author had used &lt;a href="https://docs.python.org/3.5/library/itertools.html#itertools-recipes"&gt;the partition recipe&lt;/a&gt; from the itertools library as partition_values, while more efficient, highlights a lot of what I think drives people away from functional programming&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def partition_values(vals):\n  return reduce(lambda l, v: l[v % 2].append(v) or l, vals, ([], []))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, it would be a &lt;strong&gt;great&lt;/strong&gt; place to demonstrate that functional methods can themselves utilize state that most people are quite comfortable with...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def partition_values(vals):\n    odds, evens = [], []\n    for v in vals:\n        if v % 2:\n            odds.append(v)\n        else:\n            evens.append(v)\n    return evens, odds\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;',
                            'subreddit_id': 't5_2qh0y',
                            'controversiality': 0,
                            'replies': {'data':
                                                {'before': None,
                                                'children': [
                                                            {'data':
                                                                    {'edited': 1458505300.0,
                                                                    'stickied': False,
                                                                    'created': 1458531570.0, 'distinguished': None, 'ups': 9, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d170h9i', 'created_utc': 1458502770.0, 'score_hidden': False, 'parent_id': 't1_d16y4ry', 'banned_by': None, 'author': 'hotpotatobeans', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;I don&amp;#39;t think mutating lists is very functional-like.&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;The issue with the first example isn&amp;#39;t that it&amp;#39;s &amp;#39;functional&amp;#39;; it&amp;#39;s that it&amp;#39;s comically cryptic.  Use the remainder to index the bag?  Check.  Use &lt;code&gt;or&lt;/code&gt; to return the accumulator to avoid having to write a multi-line function, knowing that &lt;code&gt;append&lt;/code&gt; is a mutator?  Check.  Items in the bag are unnamed?  Check.  I mean.... Jesus.&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': {'data': {'before': None, 'children': [{'data': {'edited': False, 'stickied': False, 'created': 1458544461.0, 'distinguished': None, 'ups': 3, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d1788t8', 'created_utc': 1458515661.0, 'score_hidden': False, 'parent_id': 't1_d170h9i', 'banned_by': None, 'author': 'kurashu89', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;I&amp;#39;d consider mutating a completely internally contained list to be functional enough. It&amp;#39;s a pragmatic approach rather than a pure one.&lt;/p&gt;\n\n&lt;p&gt;The list mutation is an implementation detail. &lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': '', 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': '', 'gilded': 0, 'archived': False, 'id': 'd1788t8', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': 'Guise I got a job, thanks! | github.com/justanr', 'score': 3, 'num_reports': None, 'body': "I'd consider mutating a completely internally contained list to be functional enough. It's a pragmatic approach rather than a pure one.\n\nThe list mutation is an implementation detail. ", 'downs': 0}, 'kind': 't1'}, {'data': {'edited': False, 'stickied': False, 'created': 1458544581.0, 'distinguished': None, 'ups': 3, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d178bf2', 'created_utc': 1458515781.0, 'score_hidden': False, 'parent_id': 't1_d170h9i', 'banned_by': None, 'author': 'minno', 'body_html': '&lt;div class="md"&gt;&lt;blockquote&gt;\n&lt;p&gt;I don&amp;#39;t think mutating lists is very functional-like.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The function, when considered as a black box, follows functional design. In a multiparadigm language like Python, I&amp;#39;m happy to mix styles under encapsulation like this.&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': '', 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': '', 'gilded': 0, 'archived': False, 'id': 'd178bf2', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': 'I &lt;3 duck typing', 'score': 3, 'num_reports': None, 'body': "&gt; I don't think mutating lists is very functional-like.\n\nThe function, when considered as a black box, follows functional design. In a multiparadigm language like Python, I'm happy to mix styles under encapsulation like this.", 'downs': 0}, 'kind': 't1'}], 'modhash': None, 'after': None}, 'kind': 'Listing'}, 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd170h9i', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 9, 'num_reports': None, 'body': "I don't think mutating lists is very functional-like.\n\nEdit:\n\nThe issue with the first example isn't that it's 'functional'; it's that it's comically cryptic.  Use the remainder to index the bag?  Check.  Use `or` to return the accumulator to avoid having to write a multi-line function, knowing that `append` is a mutator?  Check.  Items in the bag are unnamed?  Check.  I mean.... Jesus.", 'downs': 0}, 'kind': 't1'}], 'modhash': None, 'after': None}, 'kind': 'Listing'}, 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd16y4ry', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 9, 'num_reports': None, 'body': 'I really wish the author had used [the partition recipe](https://docs.python.org/3.5/library/itertools.html#itertools-recipes) from the itertools library as partition_values, while more efficient, highlights a lot of what I think drives people away from functional programming\n\n    def partition_values(vals):\n      return reduce(lambda l, v: l[v % 2].append(v) or l, vals, ([], []))\n\nAlternatively, it would be a **great** place to demonstrate that functional methods can themselves utilize state that most people are quite comfortable with...\n\n    def partition_values(vals):\n        odds, evens = [], []\n        for v in vals:\n            if v % 2:\n                odds.append(v)\n            else:\n                evens.append(v)\n        return evens, odds', 'downs': 0}, 'kind': 't1'}, {'data': {'edited': False, 'stickied': False, 'created': 1458525072.0, 'distinguished': None, 'ups': 3, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d16wofl', 'created_utc': 1458496272.0, 'score_hidden': False, 'parent_id': 't3_4b7w9u', 'banned_by': None, 'author': 'larsga', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;&amp;quot;A code&amp;quot;? That grates on me so bad every time I read it. I don&amp;#39;t even know what it is (in the context of programming).&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': {'data': {'before': None, 'children': [{'data': {'edited': False, 'stickied': False, 'created': 1458544784.0, 'distinguished': None, 'ups': 3, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d178fsz', 'created_utc': 1458515984.0, 'score_hidden': False, 'parent_id': 't1_d16wofl', 'banned_by': None, 'author': 'Deto', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;I mean, in English the proper way to express it would be &amp;quot;some code&amp;quot; instead of &amp;quot;a code&amp;quot;, but I didn&amp;#39;t have a hard time understanding what he meant.  Looks like the author lives in Brazil so maybe it&amp;#39;s just an English quirk (&amp;#39;code&amp;#39; always being plural when talking about software) that isn&amp;#39;t true in other languages.&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': '', 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd178fsz', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 3, 'num_reports': None, 'body': 'I mean, in English the proper way to express it would be "some code" instead of "a code", but I didn\'t have a hard time understanding what he meant.  Looks like the author lives in Brazil so maybe it\'s just an English quirk (\'code\' always being plural when talking about software) that isn\'t true in other languages.', 'downs': 0}, 'kind': 't1'}, {'data': {'edited': False, 'stickied': False, 'created': 1458547093.0, 'distinguished': None, 'ups': 2, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d179ufj', 'created_utc': 1458518293.0, 'score_hidden': False, 'parent_id': 't1_d16wofl', 'banned_by': None, 'author': 'FoolofGod', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;I&amp;#39;m with you. I also think the same thing every time I read it.&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': '', 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd179ufj', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 2, 'num_reports': None, 'body': "I'm with you. I also think the same thing every time I read it.", 'downs': 0}, 'kind': 't1'}], 'modhash': None, 'after': None}, 'kind': 'Listing'}, 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd16wofl', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 3, 'num_reports': None, 'body': '"A code"? That grates on me so bad every time I read it. I don\'t even know what it is (in the context of programming).', 'downs': 0}, 'kind': 't1'}, {'data': {'edited': False, 'stickied': False, 'created': 1458542450.0, 'distinguished': None, 'ups': 2, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d1770vs', 'created_utc': 1458513650.0, 'score_hidden': False, 'parent_id': 't3_4b7w9u', 'banned_by': None, 'author': 'unimpaired', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;I believe that what the author is referring to as monads are actually called functors.&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': {'data': {'before': None, 'children': [{'data': {'edited': False, 'stickied': False, 'created': 1458542723.0, 'distinguished': None, 'ups': 1, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d1776xd', 'created_utc': 1458513923.0, 'score_hidden': False, 'parent_id': 't1_d1770vs', 'banned_by': None, 'author': 'ingvij', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;You are correct. I just wanted to make a smoother introduction to FP at, as it seems, the cost of correctnes. I&amp;#39;ll probably fix, as it was already pointed out on &lt;a href="https://www.reddit.com/r/programming/comments/4b8gcm/functional_programming_philosophy/d16yqya"&gt;other subreddit&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': '', 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd1776xd', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 1, 'num_reports': None, 'body': "You are correct. I just wanted to make a smoother introduction to FP at, as it seems, the cost of correctnes. I'll probably fix, as it was already pointed out on [other subreddit](https://www.reddit.com/r/programming/comments/4b8gcm/functional_programming_philosophy/d16yqya)", 'downs': 0}, 'kind': 't1'}], 'modhash': None, 'after': None}, 'kind': 'Listing'}, 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd1770vs', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 2, 'num_reports': None, 'body': 'I believe that what the author is referring to as monads are actually called functors.', 'downs': 0}, 'kind': 't1'}, {'data': {'edited': False, 'stickied': False, 'created': 1458541719.0, 'distinguished': None, 'ups': 0, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d176l9s', 'created_utc': 1458512919.0, 'score_hidden': False, 'parent_id': 't3_4b7w9u', 'banned_by': None, 'author': 'resamune', 'body_html': '&lt;div class="md"&gt;&lt;blockquote&gt;\n&lt;p&gt;Should it alter any of the parameters that &lt;strong&gt;where&lt;/strong&gt; supplied? No&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I feel like a complete tool for not continuing to read an article when I stumble such grammar mistake :(&lt;/p&gt;\n\n&lt;p&gt;edit: not implying my grammar is error free&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': {'data': {'before': None, 'children': [{'data': {'edited': False, 'stickied': False, 'created': 1458542535.0, 'distinguished': None, 'ups': 2, 'link_id': 't3_4b7w9u', 'user_reports': [], 'approved_by': None, 'likes': None, 'name': 't1_d1772pi', 'created_utc': 1458513735.0, 'score_hidden': False, 'parent_id': 't1_d176l9s', 'banned_by': None, 'author': 'ingvij', 'body_html': '&lt;div class="md"&gt;&lt;p&gt;Sorry for that, You can continue your reading now, sir.&lt;/p&gt;\n&lt;/div&gt;', 'subreddit_id': 't5_2qh0y', 'controversiality': 0, 'replies': '', 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd1772pi', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 2, 'num_reports': None, 'body': 'Sorry for that, You can continue your reading now, sir.', 'downs': 0}, 'kind': 't1'}], 'modhash': None, 'after': None}, 'kind': 'Listing'}, 'mod_reports': [], 'removal_reason': None, 'saved': False, 'author_flair_css_class': None, 'gilded': 0, 'archived': False, 'id': 'd176l9s', 'report_reasons': None, 'subreddit': 'Python', 'author_flair_text': None, 'score': 0, 'num_reports': None, 'body': '&gt;Should it alter any of the parameters that **where** supplied? No\n\nI feel like a complete tool for not continuing to read an article when I stumble such grammar mistake :(\n\nedit: not implying my grammar is error free', 'downs': 0}, 'kind': 't1'}], 'modhash': None, 'after': None}, 'kind': 'Listing'}]
